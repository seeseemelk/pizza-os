#ifndef VECTOR_HPP
#define VECTOR_HPP

#include <cstddef>

namespace std
{

template <class T>
class vector
{
public:
	// Constructors and destructors
	vector();
	vector(const vector& x);
	vector(vector&& x);
	~vector();

	// Methods
	void push_back(const T& val);
	void push_back(T&& val);
	size_t size() const noexcept;

	// Operator overloads
	T& operator[] (size_t n);

private:
	size_t m_length = 0;
	size_t m_capacity = 8;
	T* m_contents;

	void set_capacity(size_t capacity);
};

}

template <class T>
std::vector<T>::vector()
	: m_contents(new T[m_capacity])
{
}

template <class T>
std::vector<T>::vector(const std::vector<T>& x)
	: m_contents(new T[x.m_capacity]), m_capacity(x.m_capacity), m_length(x.m_length)
{
	for (size_t i = 0; i < m_length; i++)
		m_contents[i](x.m_contents[i]);
}

template <class T>
std::vector<T>::vector(std::vector<T>&& x)
	: m_contents(x.m_contents), m_capacity(x.m_capacity), m_length(x.m_length)
{
	x.m_contents = new T[8];
	x.m_length = 0;
	x.m_capacity = 0;
}

template <class T>
std::vector<T>::~vector()
{
	delete[] m_contents;
}

template <class T>
void std::vector<T>::push_back(const T& val)
{
	if (m_length == m_capacity)
		set_capacity(m_capacity * 2);
	m_contents[m_length++] = val;
}

template <class T>
size_t std::vector<T>::size() const
{
	return m_length;
}

template <class T>
void std::vector<T>::set_capacity(size_t capacity)
{
	if (capacity > m_capacity)
	{
		T* old_contents = m_contents;
		m_contents = new T[capacity];
		m_capacity = capacity;
		for (size_t i = 0; i < m_length; i++)
			m_contents[i](old_contents[i]);
		delete[] old_contents;
	}
}

template <class T>
T& std::vector<T>::operator[] (size_t n)
{
	return m_contents[n];
}

#endif






















